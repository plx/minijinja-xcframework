name: Build and Release XCFramework

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'minijinja version to build (without v prefix)'
        required: true
        type: string
  schedule:
    # Check for new releases daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for new minijinja release
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: always build with specified version
            echo "Manual trigger detected, using version: ${{ github.event.inputs.version }}"
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Scheduled trigger: check for new releases
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/mitsuhiko/minijinja/releases/latest | jq -r '.tag_name' | sed 's/^v//')

            # Check if we already have this release
            if git ls-remote --tags origin | grep -q "v$LATEST_RELEASE"; then
              echo "Release v$LATEST_RELEASE already exists"
              echo "should-build=false" >> $GITHUB_OUTPUT
            else
              echo "New release found: v$LATEST_RELEASE"
              echo "should-build=true" >> $GITHUB_OUTPUT
              echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            fi
          fi

  build-xcframework:
    needs: check-release
    if: needs.check-release.outputs.should-build == 'true' || github.event_name == 'push'
    runs-on: macos-latest
    permissions:
      contents: write  # Required to create releases
    steps:
      - uses: actions/checkout@v4

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install Rust toolchains
        run: just install-toolchains

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ needs.check-release.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build XCFramework
        run: just build
        env:
          MINIJINJA_VERSION: ${{ steps.version.outputs.version }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xcframework
          path: output/minijinja.xcframework.zip
      
      - name: Calculate checksum
        id: checksum
        run: |
          cd output
          CHECKSUM=$(swift package compute-checksum minijinja.xcframework.zip)
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Checksum: $CHECKSUM"
      
      - name: Create Release
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.version != 'main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: minijinja XCFramework v${{ steps.version.outputs.version }}
          body: |
            ## minijinja XCFramework v${{ steps.version.outputs.version }}

            This release packages [minijinja v${{ steps.version.outputs.version }}](https://github.com/mitsuhiko/minijinja/releases/tag/${{ steps.version.outputs.version }}) as an XCFramework.

            ### Installation

            Add to your `Package.swift`:

            ```swift
            .binaryTarget(
                name: "minijinja",
                url: "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/minijinja.xcframework.zip",
                checksum: "${{ steps.checksum.outputs.checksum }}"
            )
            ```

            ### Supported Platforms

            #### Tier 1/2 Platforms (Stable Rust)
            - iOS 26.0+ (arm64 device, universal arm64/x86_64 simulator)
            - macOS 26.0+ (universal arm64/x86_64)
            - Mac Catalyst 26.0+ (universal arm64/x86_64)

            #### Tier 3 Platforms ([Experimental](#build-information))
            - tvOS 26.0+ (arm64 device, universal arm64/x86_64 simulator)
            - watchOS 26.0+ (arm64 device, universal arm64/x86_64 simulator)
            - visionOS 26.0+ (arm64 device, arm64 simulator)

            ### Features
            - Static library linking for optimal binary size
            - Debug symbols (dSYMs) embedded in XCFramework for crash symbolication
            - Unicode support enabled (unicode identifiers, attribute names, and Unicode-aware sorting)

            ### Build Information

            This XCFramework is built using a hybrid toolchain approach:

            - **Tier 1/2 platforms** (iOS, macOS, Catalyst) are built with **Rust stable 1.90.0**
            - **Tier 3 platforms** (tvOS, watchOS, visionOS) are built with **Rust nightly** using the `-Zbuild-std` flag

            Tier 3 platforms are labeled "experimental" because:
            - They use nightly Rust (though nightly is generally stable for correctness)
            - They require building the Rust standard library from source
            - They receive less real-world testing in the Rust ecosystem

            All platforms produce fully functional, safe binaries suitable for production use.
          files: output/minijinja.xcframework.zip
          token: ${{ secrets.GITHUB_TOKEN }}
